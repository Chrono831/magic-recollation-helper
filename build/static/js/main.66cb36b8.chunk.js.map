{
  "version": 3,
  "sources": [
    "HowToUseTitle.js",
    "Title.js",
    "AllSets.js",
    "SetSelector.js",
    "PackStats.js",
    "CardTypes.js",
    "CardAnalysisTableRow.js",
    "CardRarities.js",
    "CardAnalysisTable.js",
    "CardTypeAnalysis.js",
    "CardColors.js",
    "CardColorAnalysis.js",
    "cardUtilities.js",
    "CardCell.js",
    "CardRowsComplete.js",
    "CardRowsRandomized.js",
    "HowToUsePackLayouts.js",
    "PackLayouts.js",
    "App.js",
    "registerServiceWorker.js",
    "index.js"
  ],
  "names": [
    "HowToUseTitle",
    "props",
    "display",
    "show",
    "react_default",
    "a",
    "createElement",
    "style",
    "textAlign",
    "Title",
    "_Component",
    "_getPrototypeOf2",
    "_this",
    "Object",
    "classCallCheck",
    "this",
    "_len",
    "arguments",
    "length",
    "args",
    "Array",
    "_key",
    "possibleConstructorReturn",
    "getPrototypeOf",
    "call",
    "apply",
    "concat",
    "state",
    "showHelp",
    "inherits",
    "createClass",
    "key",
    "value",
    "setState",
    "index_es",
    "icon",
    "title",
    "color",
    "onClick",
    "helpIconClickHandler",
    "bind",
    "HowToUseTitle_HowToUseTitle",
    "assign",
    "Component",
    "AllSets",
    "GRN",
    "M19",
    "m19",
    "DOM",
    "dom",
    "RIX",
    "rix",
    "XLN",
    "xln",
    "HOU",
    "hou",
    "AKH",
    "akh",
    "AER",
    "aer",
    "KLD",
    "kld",
    "EMN",
    "emn",
    "SOI",
    "soi",
    "OGW",
    "ogw",
    "BFZ",
    "bfz",
    "ORI",
    "ori",
    "DTK",
    "dtk",
    "FRF",
    "frf",
    "KTK",
    "ktk",
    "THS",
    "ths",
    "ZEN",
    "zen",
    "UST",
    "ust",
    "UNDEFINED",
    "code",
    "cards",
    "getDateFormatted",
    "date",
    "parseInt",
    "replace",
    "setList",
    "keys",
    "map",
    "set",
    "name",
    "releaseDate",
    "sort",
    "b",
    "filter",
    "SetSelector",
    "className",
    "onChange",
    "setSelected",
    "autoFocus",
    "required",
    "padding",
    "defaultValue",
    "disabled",
    "PackStats",
    "data",
    "width",
    "Table",
    "responsive",
    "condensed",
    "hover",
    "booster",
    "slot",
    "index",
    "toString",
    "CardTypes",
    "Creature",
    "mtgFont",
    "order",
    "Instant",
    "Sorcery",
    "Enchantment",
    "Artifact",
    "Land",
    "Planeswalker",
    "CardAnalysisTableRow",
    "_ref",
    "rarity",
    "dataType",
    "cardType",
    "Math",
    "round",
    "fontSize",
    "CardRarities",
    "CardAnalysisTable",
    "getCardInfo",
    "getCardClass",
    "cardData",
    "CardAnalysisTableRow_CardAnalysisTableRow",
    "CardTypeAnalysis",
    "cardTypesList",
    "CardAnalysisTable_CardAnalysisTable",
    "cardsInRarity",
    "card",
    "types",
    "reduce",
    "flat",
    "next",
    "type",
    "Cards",
    "forEach",
    "CardColors",
    "W",
    "background",
    "U",
    "B",
    "R",
    "G",
    "C",
    "M",
    "L",
    "colorIdentity",
    "cardColorsList",
    "CardColorAnalysis",
    "includes",
    "cardSort",
    "colorDiff",
    "typeDiff",
    "multiverseIdDiff",
    "multiverseid",
    "getCleanedCards",
    "i",
    "sortIndex",
    "undefined",
    "getPackCount",
    "commonsCount",
    "boosterCommonCount",
    "ceil",
    "CardCell",
    "gridColumn",
    "gridRow",
    "floor",
    "alignItems",
    "justifyContent",
    "flexDirection",
    "hasOwnProperty",
    "getCardIconClass",
    "CardRowsComplete",
    "CardCell_CardCell",
    "CardRowsRandomized",
    "getCardCellAndUpdateUsedCards",
    "cardSets",
    "used",
    "size",
    "complete",
    "Set",
    "colors",
    "unusedCards",
    "from",
    "some",
    "getUnusedCards",
    "random",
    "getRandomCard",
    "add",
    "numberOfRows",
    "rowSize",
    "acc",
    "cur",
    "getCardSets",
    "cardCount",
    "cardRows",
    "push",
    "getRandomRows",
    "rows",
    "HowToUsePackLayouts",
    "PackLayouts",
    "HowToUsePackLayouts_HowToUsePackLayouts",
    "CardRowsComplete_CardRowsComplete",
    "CardRowsRandomized_CardRowsRandomized",
    "library",
    "faQuestionCircle",
    "App",
    "event",
    "target",
    "toUpperCase",
    "Title_Title",
    "SetSelector_SetSelector",
    "CardTypeAnalysis_CardTypeAnalysis",
    "CardColorAnalysis_CardColorAnalysis",
    "PackLayouts_PackLayouts",
    "PackStats_PackStats",
    "isLocalhost",
    "Boolean",
    "window",
    "location",
    "hostname",
    "match",
    "registerValidSW",
    "swUrl",
    "navigator",
    "serviceWorker",
    "register",
    "then",
    "registration",
    "onupdatefound",
    "installingWorker",
    "installing",
    "onstatechange",
    "controller",
    "console",
    "log",
    "catch",
    "error",
    "ReactDOM",
    "render",
    "src_App_0",
    "document",
    "getElementById",
    "URL",
    "process",
    "origin",
    "addEventListener",
    "fetch",
    "response",
    "status",
    "headers",
    "get",
    "indexOf",
    "ready",
    "unregister",
    "reload",
    "checkValidServiceWorker",
    "registerServiceWorker"
  ],
  "mappings": "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",
  "file": "static/js/main.66cb36b8.chunk.js",
  "sourcesContent": [
    "import React from \"react\";\n\nexport const HowToUseTitle = props => {\n  const display = props.show ? \"initial\" : \"none\";\n  return (\n    <div style={{ textAlign: \"left\", display: display }}>\n      <p>\n        This is a tool to help you create packs usable for playing limited magic\n        from your existing card pool\n      </p>\n      <p>Steps</p>\n      <ol>\n        <li>Gather cards for the set you want to collate</li>\n        <li>\n          Sort cards by\n          <ul>\n            <li>Rarity - Common, Uncommon, Rare+Mythic</li>\n            <li>\n              Color - White, blUe, Black, Red, Green, Colorless, Multicolor\n            </li>\n            <li>\n              Type - Creature, Instant, Sorcery, Artifact, Enchantment, Land,\n              Planeswalker\n            </li>\n          </ul>\n        </li>\n        <li>Use the \"Pack Layout\" section below to layout your packs</li>\n      </ol>\n    </div>\n  );\n};\n",
    "import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { HowToUseTitle } from \"./HowToUseTitle\";\n\nexport class Title extends Component {\n  state = { showHelp: false };\n\n  helpIconClickHandler() {\n    this.setState({ showHelp: !this.state.showHelp });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          <span>Magic ReCollation Helper </span>\n          <FontAwesomeIcon\n            icon=\"question-circle\"\n            title=\"How To Use\"\n            color={\"#5f9ea0\"}\n            onClick={this.helpIconClickHandler.bind(this)}\n          />\n        </h1>\n        <HowToUseTitle show={this.state.showHelp} {...this.props} />\n      </div>\n    );\n  }\n}\n",
    "import dom from \"./sets/DOM\";\nimport ktk from \"./sets/KTK\";\nimport ths from \"./sets/THS\";\nimport ust from \"./sets/UST\";\nimport m19 from \"./sets/M19\";\nimport aer from \"./sets/AER\";\nimport emn from \"./sets/EMN\";\nimport frf from \"./sets/FRF\";\nimport kld from \"./sets/KLD\";\nimport soi from \"./sets/SOI\";\nimport rix from \"./sets/RIX\";\nimport akh from \"./sets/AKH\";\nimport bfz from \"./sets/BFZ\";\nimport dtk from \"./sets/DTK\";\nimport hou from \"./sets/HOU\";\nimport ogw from \"./sets/OGW\";\nimport ori from \"./sets/ORI\";\nimport xln from \"./sets/XLN\";\nimport zen from \"./sets/ZEN\";\nimport grn from \"./sets/GRN\";\n\nexport const AllSets = {\n  //RNA: rna, //gonna have to migrate all of the parsing to the new json format and update every thing...\n  GRN: grn,\n  M19: m19,\n  DOM: dom,\n  RIX: rix,\n  XLN: xln,\n  HOU: hou,\n  AKH: akh,\n  AER: aer,\n  KLD: kld,\n  EMN: emn,\n  SOI: soi,\n  OGW: ogw,\n  BFZ: bfz,\n  ORI: ori,\n  DTK: dtk,\n  FRF: frf,\n  KTK: ktk,\n  THS: ths,\n  ZEN: zen,\n  UST: ust,\n\n  UNDEFINED: { code: \"\", cards: [] }\n};\n",
    "import React from \"react\";\nimport { AllSets } from \"./AllSets\";\nimport \"./SetSelector.css\";\n\nconst MIN_DATE = 19900101;\n\nconst getDateFormatted = date =>\n  date ? parseInt(date.replace(/-/g, \"\"), 10) : MIN_DATE;\n\nconst sortSetByReleaseDateDesc = (a, b) =>\n  getDateFormatted(b.releaseDate) - getDateFormatted(a.releaseDate);\n\nconst setList = Object.keys(AllSets)\n  .map(set => {\n    return {\n      name: AllSets[set].name,\n      code: AllSets[set].code,\n      releaseDate: AllSets[set].releaseDate\n    };\n  })\n  .sort(sortSetByReleaseDateDesc)\n  .filter(set => set.code !== \"\");\n\nexport const SetSelector = props => (\n  <div className=\"SetSelector\">\n    <span className={\"SetSelector-title\"}>Set</span>\n    <select\n      onChange={props.setSelected}\n      autoFocus={true}\n      required={true}\n      style={{ padding: \"5px\" }}\n      defaultValue={\"placeholder\"}\n    >\n      <option value=\"placeholder\" disabled>\n        Select a set\n      </option>\n      {setList.map(set => (\n        <option key={set.code} value={set.code}>\n          {set.name} ({set.code})\n        </option>\n      ))}\n    </select>\n  </div>\n);\n",
    "import React from \"react\";\nimport { Table } from \"react-bootstrap\";\n\nimport { AllSets } from \"./AllSets\";\n\nexport const PackStats = props => {\n  const data = AllSets[props.code];\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <h2 style={{ textAlign: \"left\" }}>Pack Stats</h2>\n      <Table responsive condensed hover>\n        <thead>\n          <tr>\n            <th>Slot</th>\n            <th>Card Types</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.booster.map((slot, index) => (\n            <tr key={`data-booster-td-${slot}-${index}`}>\n              <td style={{ textAlign: \"left\" }}>{index + 1}</td>\n              <td style={{ textAlign: \"left\" }}>{slot.toString()}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n",
    "export const CardTypes = {\n  Creature: { mtgFont: \"mi-creature\", order: 0, name: \"Creature\" },\n  Instant: { mtgFont: \"mi-instant\", order: 1, name: \"Instant\" },\n  Sorcery: { mtgFont: \"mi-sorcery\", order: 2, name: \"Sorcery\" },\n  Enchantment: { mtgFont: \"mi-enchantment\", order: 3, name: \"Enchantment\" },\n  Artifact: { mtgFont: \"mi-artifact\", order: 4, name: \"Artifact\" },\n  Land: { mtgFont: \"mi-land\", order: 5, name: \"Land\" },\n  Planeswalker: { mtgFont: \"mi-planeswalker\", order: 6, name: \"Planeswalker\" }\n};\n",
    "import React from \"react\";\n\nexport const CardAnalysisTableRow = ({ rarity, data, dataType }) => {\n  return (\n    <tr>\n      <td style={{ textAlign: \"left\" }}>{rarity}</td>\n      <td style={{ textAlign: \"left\" }}>{data[\"Cards\"]}</td>\n      {dataType.map(cardType => (\n        <td\n          key={\"td\" + cardType + cardType.length}\n          style={{ textAlign: \"left\" }}\n        >\n          <span>{Math.round((100 * data[cardType]) / data[\"Cards\"], 2)}% </span>\n          <span style={{ fontSize: \"smaller\", color: \"slategray\" }}>\n            ({data[cardType]})\n          </span>\n        </td>\n      ))}\n    </tr>\n  );\n};\n",
    "// @flow\n\nexport const CardRarities: Array<string> = [\n  \"Common\",\n  \"Uncommon\",\n  \"Rare\",\n  \"Mythic Rare\"\n];\n",
    "import React from \"react\";\n\nimport { Table } from \"react-bootstrap\";\nimport { CardAnalysisTableRow } from \"./CardAnalysisTableRow\";\nimport { AllSets } from \"./AllSets\";\nimport { CardRarities } from \"./CardRarities\";\n\nexport const CardAnalysisTable = ({\n  dataType,\n  code,\n  getCardInfo,\n  getCardClass\n}) => (\n  <Table condensed hover responsive>\n    <thead>\n      <tr>\n        <th>Rarity</th>\n        <th>Cards</th>\n        {dataType.map(cardData => (\n          <th key={`th-${cardData}-${cardData.length}`}>\n            <i className={getCardClass(cardData)} title={cardData} />\n          </th>\n        ))}\n      </tr>\n    </thead>\n    <tbody>\n      {CardRarities.map(rarity => (\n        <CardAnalysisTableRow\n          rarity={rarity}\n          data={getCardInfo(AllSets[code].cards, rarity)}\n          dataType={dataType}\n          key={`tr-${dataType.length}-${AllSets[code].name}-${rarity}`}\n        />\n      ))}\n    </tbody>\n  </Table>\n);\n",
    "import React from \"react\";\n\nimport { CardTypes } from \"./CardTypes\";\nimport { CardAnalysisTable } from \"./CardAnalysisTable\";\n\nexport const CardTypeAnalysis = props => {\n  const getCardClass = cardType =>\n    `mi ${CardTypes[cardType].mtgFont} mi-shadow mi-lg`;\n\n  const cardTypesList = Object.keys(CardTypes);\n\n  const getCardInfo = (cards, rarity) => {\n    const cardsInRarity = cards.filter(card => card.rarity === rarity);\n    const data = cardsInRarity\n      .map(card => card.types)\n      .reduce((flat, next) => flat.concat(next), [])\n      .reduce(function(types, type) {\n        if (type in types) {\n          types[type]++;\n        } else {\n          types[type] = 1;\n        }\n        return types;\n      }, {});\n    data.Cards = cardsInRarity.length;\n    cardTypesList.forEach(function(cardType) {\n      data[cardType] = cardType in data ? data[cardType] : 0;\n    });\n    return data;\n  };\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <h2 style={{ textAlign: \"left\" }}>Card Type Analysis</h2>\n      <CardAnalysisTable\n        dataType={cardTypesList}\n        getCardInfo={getCardInfo.bind(this)}\n        getCardClass={getCardClass.bind(this)}\n        {...props}\n      />\n    </div>\n  );\n};\n",
    "// @flow\n\nexport const CardColors = {\n  W: { mtgFont: \"mi-w\", background: \"#f8f6d8\", order: 0, name: \"White\" },\n  U: { mtgFont: \"mi-u\", background: \"#c1d7e9\", order: 1, name: \"Blue\" },\n  B: { mtgFont: \"mi-b\", background: \"#75726e\", order: 2, name: \"Black\" },\n  R: { mtgFont: \"mi-r\", background: \"#e49977\", order: 3, name: \"Red\" },\n  G: { mtgFont: \"mi-g\", background: \"#a3c095\", order: 4, name: \"Green\" },\n  C: { mtgFont: \"mi-c\", background: \"#cac5c0\", order: 5, name: \"Colorless\" },\n  M: {\n    mtgFont: \"mi-chaos multicolor-card\",\n    background: \"#f9d44e\",\n    order: 6,\n    name: \"Multicolor\"\n  },\n  L: { mtgFont: \"\", background: \"#a9683f\", order: 7, name: \"Land\" }\n};\n",
    "import React from \"react\";\n\nimport { CardColors } from \"./CardColors\";\n\nimport \"./mtg-font-master/css/magic-font.css\";\nimport \"./CardColorAnalysis.css\";\nimport { CardAnalysisTable } from \"./CardAnalysisTable\";\n\nconst getCardClass = colorIdentity =>\n  `mi ${CardColors[colorIdentity].mtgFont} mi-mana mi-shadow mi-lg`;\n\nconst cardColorsList = Object.keys(CardColors).filter(key => key !== \"L\");\n\nexport const CardColorAnalysis = props => {\n  const getCardInfo = (cards, rarity) => {\n    const cardsInRarity = cards.filter(card => card.rarity === rarity);\n    const data = {\n      W: 0,\n      U: 0,\n      B: 0,\n      R: 0,\n      G: 0,\n      M: 0,\n      C: 0,\n      Cards: 0\n    };\n    cardsInRarity.forEach(function(card) {\n      if (Object.keys(card).includes(\"colors\")) {\n        //intentionally excludes lands\n        if (card.colorIdentity.length === 1) {\n          data[card.colorIdentity]++;\n        } else {\n          data[\"M\"]++;\n        }\n      } else {\n        data[\"C\"]++;\n      }\n    });\n    data.Cards = cardsInRarity.length;\n    return data;\n  };\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <h2 style={{ textAlign: \"left\" }}>Card Color Analysis</h2>\n      <CardAnalysisTable\n        dataType={cardColorsList}\n        getCardInfo={getCardInfo.bind(this)}\n        getCardClass={getCardClass.bind(this)}\n        {...props}\n      />\n    </div>\n  );\n};\n",
    "import { AllSets } from \"./AllSets\";\nimport { CardColors } from \"./CardColors\";\nimport { CardTypes } from \"./CardTypes\";\n\nconst cardSort = (a, b) => {\n  const colorDiff =\n    CardColors[a.colorIdentity].order - CardColors[b.colorIdentity].order;\n  const typeDiff =\n    (a.types.length === b.types.length) === 1\n      ? CardTypes[a.types[0]].order - CardTypes[b.types[0]].order\n      : CardTypes[a.types[a.types.length - 1]].order -\n        CardTypes[b.types[b.types.length - 1]].order;\n  const multiverseIdDiff = a.multiverseid - b.multiverseid;\n\n  if (colorDiff === 0) {\n    if (typeDiff === 0) {\n      return multiverseIdDiff;\n    } else {\n      return typeDiff;\n    }\n  } else {\n    return colorDiff;\n  }\n};\n\nexport const getCleanedCards = (code, rarity) => {\n  const set = AllSets[code];\n  const cards = set.cards.filter(card => card.rarity.includes(rarity));\n  for (let i = 0; i < cards.length; i++) {\n    const card = cards[i];\n    card.sortIndex = i + 1;\n    card.colorIdentity = card.types.includes(\"Land\")\n      ? \"L\"\n      : card.colorIdentity === undefined\n        ? \"C\"\n        : card.colorIdentity.length > 1\n          ? \"M\"\n          : card.colorIdentity[0];\n  }\n  return cards.sort(cardSort);\n};\n\nexport const getPackCount = code => {\n  const set = AllSets[code];\n  const commonsCount = set.cards.filter(card => card[\"rarity\"] === \"Common\")\n    .length;\n  const boosterCommonCount = set.booster.filter(card => card === \"common\")\n    .length;\n\n  return Math.ceil(commonsCount / boosterCommonCount);\n};\n\nexport const getRandomCard = cards => {\n  const calc = Math.floor(Math.random() * cards.length);\n  return cards[calc];\n};\n",
    "import React from \"react\";\n\nimport { CardColors } from \"./CardColors\";\nimport { CardTypes } from \"./CardTypes\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { getPackCount } from \"./cardUtilities\";\n\nexport const CardCell = props => {\n  const getCardStyle = () => ({\n    gridColumn: props.index % getPackCount(props.code),\n    gridRow: Math.floor((props.index - 1) / getPackCount(props.code)) + 1,\n    background: CardColors[props.card.colorIdentity].background,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\",\n    flexDirection: \"column\"\n  });\n\n  const getCardIconClass = type => {\n    if (!CardTypes.hasOwnProperty(type)) {\n      return <FontAwesomeIcon icon=\"question-circle\" title={type} />;\n    }\n\n    const className = `mi ${CardTypes[type].mtgFont} mi-lg`;\n    return <i className={className} title={type} />;\n  };\n\n  return (\n    <div\n      style={getCardStyle(props.card, props.index)}\n      key={`grid-${props.card.multiverseid}-${props.index}`}\n    >\n      {props.card.types.map(type => (\n        <div\n          key={`card-types-${type}-${props.card.multiverseid}-${props.index}`}\n          style={{ fontSize: \"3rem\" }}\n        >\n          {getCardIconClass(type)}\n        </div>\n      ))}\n    </div>\n  );\n};\n",
    "import React from \"react\";\n\nimport \"./cardGridContainer.css\";\nimport { getCleanedCards, getPackCount } from \"./cardUtilities\";\nimport { CardCell } from \"./CardCell\";\n\nexport const CardRowsComplete = props => (\n  <div>\n    <h4 style={{ textAlign: \"left\" }}>\n      {props.rarity} -- {getPackCount(props.code)} packs\n    </h4>\n    <div className=\"card-grid-container\">\n      {getCleanedCards(props.code, props.rarity).map((card, index) => (\n        <CardCell\n          key={`card-cell-${card.multiverseid}-${index}`}\n          card={card}\n          index={index + 1}\n          {...props}\n        />\n      ))}\n    </div>\n  </div>\n);\n",
    "import React from \"react\";\n\nimport \"./cardGridContainer.css\";\nimport { getCleanedCards, getPackCount, getRandomCard } from \"./cardUtilities\";\nimport { CardCell } from \"./CardCell\";\n\nexport const CardRowsRandomized = props => {\n  const getUnusedCards = (cards, cardSets) =>\n    cards\n      .filter(\n        card =>\n          Array.from(cardSets.used.colors).some(\n            color => color === card.colorIdentity\n          ) === false\n      )\n      .filter(\n        card =>\n          Array.from(cardSets.used.types).some(\n            type => type === card.types[0]\n          ) === false\n      );\n\n  const getCardSets = cards => ({\n    complete: {\n      colors: new Set(cards.map(card => card.colorIdentity)),\n      types: new Set(\n        cards.map(card => card.types).reduce((acc, cur) => acc.concat(cur))\n      )\n    },\n    used: {\n      colors: new Set(),\n      types: new Set()\n    }\n  });\n\n  const getCardCellAndUpdateUsedCards = (cardSets, cards, index) => {\n    if (cardSets.used.types.size === cardSets.complete.types.size) {\n      cardSets.used.types = new Set();\n    }\n    if (cardSets.used.colors.size === cardSets.complete.colors.size) {\n      cardSets.used.colors = new Set();\n    }\n\n    let unusedCards = getUnusedCards(cards, cardSets);\n    if (!unusedCards.length) {\n      cardSets.used.types = new Set();\n      cardSets.used.colors = new Set();\n      unusedCards = cards;\n    }\n\n    const card = getRandomCard(unusedCards);\n\n    cardSets.used.colors.add(card.colorIdentity);\n    cardSets.used.types.add(card.types.map(type => type));\n\n    return (\n      <CardCell\n        key={`card-cell-row-${card.multiverseid}-${index}`}\n        card={card}\n        index={index + 1}\n        {...props}\n      />\n    );\n  };\n\n  const getRandomRows = (rarity, numberOfRows) => {\n    const cards = getCleanedCards(props.code, rarity);\n    const rowSize = getPackCount(props.code);\n    const cardSets = getCardSets(cards);\n    const cardCount = rowSize * numberOfRows;\n\n    let cardRows = [];\n    for (let index = 0; index < cardCount; index++) {\n      cardRows.push(getCardCellAndUpdateUsedCards(cardSets, cards, index));\n    }\n    return cardRows;\n  };\n\n  return (\n    <div>\n      <h4 style={{ textAlign: \"left\" }}>{props.rarity}</h4>\n      <div className=\"card-grid-container\">\n        {getRandomRows(props.rarity, props.rows)}\n      </div>\n    </div>\n  );\n};\n",
    "import React from \"react\";\n\nexport const HowToUsePackLayouts = props => {\n  const display = props.show ? \"initial\" : \"none\";\n  return (\n    <div style={{ textAlign: \"left\", display: display }}>\n      <h3>How To Use</h3>\n      <p> * Layout packs for each column</p>\n      <p> * Stack cards on each pack for each row</p>\n      <p> * Fill in cards for last row on Commons with a random selection</p>\n    </div>\n  );\n};\n",
    "import React, { Component } from \"react\";\n\nimport { CardRowsComplete } from \"./CardRowsComplete\";\nimport { CardRowsRandomized } from \"./CardRowsRandomized\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { HowToUsePackLayouts } from \"./HowToUsePackLayouts\";\n\nexport class PackLayouts extends Component {\n  state = { showHelp: false };\n\n  helpIconClickHandler() {\n    this.setState({ showHelp: !this.state.showHelp });\n  }\n\n  render() {\n    return (\n      <div style={{ width: \"100%\" }}>\n        <h2 style={{ textAlign: \"left\" }}>\n          <span>Pack Layout </span>\n          <FontAwesomeIcon\n            icon=\"question-circle\"\n            title=\"How To Layout Packs\"\n            color={\"#5f9ea0\"}\n            onClick={this.helpIconClickHandler.bind(this)}\n          />\n        </h2>\n        <HowToUsePackLayouts show={this.state.showHelp} {...this.props} />\n        <CardRowsComplete rarity=\"Common\" {...this.props} />\n        <CardRowsRandomized rarity=\"Uncommon\" rows={3} {...this.props} />\n        <CardRowsRandomized rarity=\"Rare\" rows={1} {...this.props} />\n      </div>\n    );\n  }\n}\n",
    "import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Title } from \"./Title\";\nimport { SetSelector } from \"./SetSelector\";\nimport { PackStats } from \"./PackStats\";\nimport { CardTypeAnalysis } from \"./CardTypeAnalysis\";\nimport { CardColorAnalysis } from \"./CardColorAnalysis\";\nimport { PackLayouts } from \"./PackLayouts\";\nimport { AllSets } from \"./AllSets\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\n\nlibrary.add(faQuestionCircle);\n\nclass App extends Component {\n  state = { code: AllSets.UNDEFINED };\n\n  setSelected(event) {\n    this.setState({ code: event.target.value.toString().toUpperCase() });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Title />\n          <hr />\n          <SetSelector setSelected={this.setSelected.bind(this)} />\n        </header>\n        <main className=\"App-main\">\n          {this.state.code !== AllSets.UNDEFINED && (\n            <div className=\"App-set-info\">\n              <CardTypeAnalysis code={this.state.code} />\n              <CardColorAnalysis code={this.state.code} />\n              <PackLayouts code={this.state.code} />\n              <PackStats code={this.state.code} />\n            </div>\n          )}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n",
    "// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  // noinspection JSUnresolvedVariable\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    // noinspection JSCheckFunctionSignatures\n    // noinspection JSUnresolvedVariable\n    // noinspection JSCheckFunctionSignatures\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      // noinspection JSUnresolvedVariable\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\n// noinspection JSUnusedGlobalSymbols\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      // noinspection JSIgnoredPromiseFromCall\n      registration.unregister();\n    });\n  }\n}\n",
    "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"
  ],
  "sourceRoot": ""
}